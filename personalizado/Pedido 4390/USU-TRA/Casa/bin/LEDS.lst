ANSI-C/cC++ Compiler for HC08 V-5.0.17, Apr 22 2003

    1:  /*
    2:  ** ###################################################################
    3:  **
    4:  **     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
    5:  **
    6:  **     Filename  : LEDS.C
    7:  **
    8:  **     Project   : vph1
    9:  ** 
   10:  **     Processor : MC68HC908GP32CFB
   11:  **
   12:  **     Beantype  : ByteIO
   13:  **
   14:  **     Version   : Bean 02.018, Driver 02.15, CPU db: 2.89.000
   15:  **
   16:  **     Compiler  : Metrowerks HC08 C Compiler
   17:  **
   18:  **     Date/Time : 4/30/viernes, 11:09
   19:  **
   20:  **     Abstract  :
   21:  **
   22:  **         This bean "ByteIO" implements an one-byte input/output.
   23:  **         It uses one 8-bit port.
   24:  **         Note: This bean is set to work in Output direction only.
   25:  **         Methods of this bean are mostly implemented as a macros 
   26:  **         (if supported by target langauage and compiler).
   27:  **
   28:  **     Settings  :
   29:  **
   30:  **         Port name                   : PTB
   31:  **
   32:  **         Initial direction           : Output (direction cannot be changed)
   33:  **         Initial output value        : 0 = 000H
   34:  **         Initial pull option         : off
   35:  **
   36:  **         8-bit data register         : PTB       [1]
   37:  **         8-bit control register      : DDRB      [5]
   38:  **
   39:  **             ----------------------------------------------------
   40:  **                   Bit     |   Pin   |   Name
   41:  **             ----------------------------------------------------
   42:  **                    0      |    22   |   PTB0_AD0
   43:  **                    1      |    23   |   PTB1_AD1
   44:  **                    2      |    24   |   PTB2_AD2
   45:  **                    3      |    25   |   PTB3_AD3
   46:  **                    4      |    26   |   PTB4_AD4
   47:  **                    5      |    27   |   PTB5_AD5
   48:  **                    6      |    28   |   PTB6_AD6
   49:  **                    7      |    29   |   PTB7_AD7
   50:  **             ----------------------------------------------------
   51:  **
   52:  **     Contents  :
   53:  **
   54:  **         GetDir - bool LEDS_GetDir(void);
   55:  **         GetVal - byte LEDS_GetVal(void);
   56:  **         PutVal - void LEDS_PutVal(byte Val);
   57:  **         GetBit - bool LEDS_GetBit(byte Bit);
   58:  **         PutBit - void LEDS_PutBit(byte Bit,bool Val);
   59:  **         SetBit - void LEDS_SetBit(byte Bit);
   60:  **         ClrBit - void LEDS_ClrBit(byte Bit);
   61:  **         NegBit - void LEDS_NegBit(byte Bit);
   62:  **
   63:  **
   64:  **     (c) Copyright UNIS, spol. s r.o. 1997-2002
   65:  **
   66:  **     UNIS, spol. s r.o.
   67:  **     Jundrovska 33
   68:  **     624 00 Brno
   69:  **     Czech Republic
   70:  **
   71:  **     http      : www.processorexpert.com
   72:  **     mail      : info@processorexpert.com
   73:  **
   74:  ** ###################################################################
   75:  */
   76:  
   77:  #include "LEDS.h"
   78:  
   79:  /*Including shared modules, which are used for all project*/
   80:  #include "PE_Types.h"
   81:  #include "PE_Error.h"
   82:  #include "PE_Const.h"
   83:  #include "IO_Map.h"
   84:  #include "Cpu.h"
   85:  
   86:  /*
   87:  ** ===================================================================
   88:  **     Method      :  LEDS_GetMsk (bean ByteIO)
   89:  **
   90:  **     Description :
   91:  **         This method is internal. It is used by Processor Expert
   92:  **         only.
   93:  ** ===================================================================
   94:  */
   95:  const byte LEDS_Table[8]={ 1, 2, 4, 8, 16, 32, 64, 128 }; /* Table of mask constants */
   96:  
   97:  byte LEDS_GetMsk(byte Value)
   98:  {

Function: LEDS_GetMsk
Source  : Z:\vph1\2puertas\Casa\Code\LEDS.C
Options : -Cc -Env"GENPATH=Z:\vph1\2puertas\Casa;Z:\vph1\2puertas\Casa\bin;Z:\vph1\2puertas\Casa\cmd;*Z:\vph1\2puertas\Casa\Code;Z:\vph1\2puertas\Casa\prm;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\2puertas\Comun;*Z:\vph1\2puertas;Z:\vph1\2puertas\Casa\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\2puertas\Casa\bin -EnvTEXTPATH=Z:\vph1\2puertas\Casa\bin -Lasm=%n.lst -ObjN=Z:\vph1\2puertas\Casa\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\LEDS.C.o -Qvtpfar -WmsgSd1106

   99:    return((Value<8)?LEDS_Table[Value]:0); /* Return appropriate bit mask */
  0000 a108             CMP   #8
  0002 2502             BCS   L6 ;abs = 0006
  0004 4f               CLRA  
  0005 81               RTS   
  0006          L6:     
  0006 8c               CLRH  
  0007 97               TAX   
  0008 d60000           LDA   @LEDS_Table,X
  100:  }
  000b 81               RTS   
  101:  
  102:  /*
  103:  ** ===================================================================
  104:  **     Method      :  LEDS_GetVal (bean ByteIO)
  105:  **
  106:  **     Description :
  107:  **         This method returns an input value.
  108:  **           a) direction = Input  : reads the input value from the
  109:  **                                   pins and returns it
  110:  **           b) direction = Output : returns the last written value
  111:  **         Note: This bean is set to work in Output direction only.
  112:  **     Parameters  : None
  113:  **     Returns     :
  114:  **         ---        - Input value (0 to 255)
  115:  ** ===================================================================
  116:  */
  117:  /*
  118:  byte LEDS_GetVal(void)
  119:  
  120:  **  This method is implemented as a macro. See LEDS.h file.  **
  121:  */
  122:  
  123:  /*
  124:  ** ===================================================================
  125:  **     Method      :  LEDS_PutVal (bean ByteIO)
  126:  **
  127:  **     Description :
  128:  **         This method writes the new output value.
  129:  **     Parameters  :
  130:  **         NAME       - DESCRIPTION
  131:  **         Value      - Output value (0 to 255)
  132:  **     Returns     : Nothing
  133:  ** ===================================================================
  134:  */
  135:  /*
  136:  void LEDS_PutVal(byte Value)
  137:  
  138:  **  This method is implemented as a macro. See LEDS.h file.  **
  139:  */
  140:  
  141:  /*
  142:  ** ===================================================================
  143:  **     Method      :  LEDS_GetBit (bean ByteIO)
  144:  **
  145:  **     Description :
  146:  **         This method returns the specified bit of the input value.
  147:  **           a) direction = Input  : reads the input value from pins
  148:  **                                   and returns the specified bit
  149:  **           b) direction = Output : returns the specified bit
  150:  **                                   of the last written value
  151:  **         Note: This bean is set to work in Output direction only.
  152:  **     Parameters  :
  153:  **         NAME       - DESCRIPTION
  154:  **         Bitnum     - Number of the bit to read (0 to 7)
  155:  **     Returns     :
  156:  **         ---        - Value of the specified bit (FALSE or TRUE)
  157:  **                      FALSE = "0" or "Low", TRUE = "1" or "High"
  158:  ** ===================================================================
  159:  */
  160:  bool LEDS_GetBit(byte BitNum)
  161:  {

Function: LEDS_GetBit
Source  : Z:\vph1\2puertas\Casa\Code\LEDS.C
Options : -Cc -Env"GENPATH=Z:\vph1\2puertas\Casa;Z:\vph1\2puertas\Casa\bin;Z:\vph1\2puertas\Casa\cmd;*Z:\vph1\2puertas\Casa\Code;Z:\vph1\2puertas\Casa\prm;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\2puertas\Comun;*Z:\vph1\2puertas;Z:\vph1\2puertas\Casa\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\2puertas\Casa\bin -EnvTEXTPATH=Z:\vph1\2puertas\Casa\bin -Lasm=%n.lst -ObjN=Z:\vph1\2puertas\Casa\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\LEDS.C.o -Qvtpfar -WmsgSd1106

  0000 a7fe             AIS   #-2
  162:    byte Mask=LEDS_GetMsk(BitNum);       /* Temporary variable - bit mask */
  0002 ad00             BSR   LEDS_GetMsk
  0004 95               TSX   
  0005 f7               STA   ,X
  163:    byte Val;                            /* Temporary variable */
  164:    byte Result=0;                       /* Temporary variable */
  0006 6f01             CLR   1,X
  165:  
  166:    if (Mask) {                          /* Is bit mask correct? */
  0008 7d               TST   ,X
  0009 270c             BEQ   L17 ;abs = 0017
  167:      Val = PTB;                         /* Load of actual value of the port */
  000b b600             LDA   _PTB
  168:      Val &= Mask;                       /* Mask appropriate bit */
  000d f4               AND   ,X
  169:      Result = (Val == Mask);            /* If value of masked bit is non-zero then store logical one to the variable Result */
  000e f1               CMP   ,X
  000f 2702             BEQ   L13 ;abs = 0013
  0011 4f               CLRA  
  0012 65               SKIP2 L15 ;abs = 0015
  0013          L13:    
  0013 a601             LDA   #1
  0015          L15:    
  0015 e701             STA   1,X
  0017          L17:    
  170:    }
  171:    return(Result);                      /* Return input value */
  0017 e601             LDA   1,X
  172:  }
  0019 a702             AIS   #2
  001b 81               RTS   
  173:  
  174:  /*
  175:  ** ===================================================================
  176:  **     Method      :  LEDS_PutBit (bean ByteIO)
  177:  **
  178:  **     Description :
  179:  **         This method writes the new value to the specified bit
  180:  **         of the output value.
  181:  **     Parameters  :
  182:  **         NAME       - DESCRIPTION
  183:  **         Bitnum     - Number of the bit (0 to 7)
  184:  **         Val        - New value of the bit (FALSE or TRUE)
  185:  **                      FALSE = "0" or "Low", TRUE = "1" or "High"
  186:  **     Returns     : Nothing
  187:  ** ===================================================================
  188:  */
  189:  void LEDS_PutBit(byte BitNum, byte Value)
  190:  {

Function: LEDS_PutBit
Source  : Z:\vph1\2puertas\Casa\Code\LEDS.C
Options : -Cc -Env"GENPATH=Z:\vph1\2puertas\Casa;Z:\vph1\2puertas\Casa\bin;Z:\vph1\2puertas\Casa\cmd;*Z:\vph1\2puertas\Casa\Code;Z:\vph1\2puertas\Casa\prm;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\2puertas\Comun;*Z:\vph1\2puertas;Z:\vph1\2puertas\Casa\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\2puertas\Casa\bin -EnvTEXTPATH=Z:\vph1\2puertas\Casa\bin -Lasm=%n.lst -ObjN=Z:\vph1\2puertas\Casa\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\LEDS.C.o -Qvtpfar -WmsgSd1106

  0000 89               PSHX  
  0001 8b               PSHH  
  191:    byte Mask=LEDS_GetMsk(BitNum);       /* Temporary variable - bit mask */
  0002 ad00             BSR   LEDS_GetMsk
  0004 95               TSX   
  0005 f7               STA   ,X
  192:  
  193:    if (Mask)                            /* Is bit mask correct? */
  0006 270e             BEQ   L16 ;abs = 0016
  194:      if (Value) {                       /* Is it one to be written? */
  0008 6d01             TST   1,X
  000a 2705             BEQ   L11 ;abs = 0011
  195:        PTB |= Mask;                     /* Set appropriate bit on port */
  000c b600             LDA   _PTB
  000e fa               ORA   ,X
  196:      }
  000f 2003             BRA   L14 ;abs = 0014
  0011          L11:    
  197:      else {                             /* Is it zero to be written? */
  198:        PTB &= ~Mask;                    /* Clear appropriate bit on port */
  0011 43               COMA  
  0012 b400             AND   _PTB
  0014          L14:    
  0014 b700             STA   _PTB
  0016          L16:    
  199:      }
  200:  }
  0016 a702             AIS   #2
  0018 81               RTS   
  201:  
  202:  /*
  203:  ** ===================================================================
  204:  **     Method      :  LEDS_SetBit (bean ByteIO)
  205:  **
  206:  **     Description :
  207:  **         This method sets (sets to one) the specified bit of the
  208:  **         output value.
  209:  **         [ It is the same as "PutBit(Bit,TRUE);" ]
  210:  **     Parameters  :
  211:  **         NAME       - DESCRIPTION
  212:  **         Bitnum     - Number of the bit to set (0 to 7)
  213:  **     Returns     : Nothing
  214:  ** ===================================================================
  215:  */
  216:  void LEDS_SetBit(byte BitNum)
  217:  {

Function: LEDS_SetBit
Source  : Z:\vph1\2puertas\Casa\Code\LEDS.C
Options : -Cc -Env"GENPATH=Z:\vph1\2puertas\Casa;Z:\vph1\2puertas\Casa\bin;Z:\vph1\2puertas\Casa\cmd;*Z:\vph1\2puertas\Casa\Code;Z:\vph1\2puertas\Casa\prm;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\2puertas\Comun;*Z:\vph1\2puertas;Z:\vph1\2puertas\Casa\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\2puertas\Casa\bin -EnvTEXTPATH=Z:\vph1\2puertas\Casa\bin -Lasm=%n.lst -ObjN=Z:\vph1\2puertas\Casa\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\LEDS.C.o -Qvtpfar -WmsgSd1106

  0000 8b               PSHH  
  218:    byte Mask=LEDS_GetMsk(BitNum);       /* Temporary variable - bit mask */
  0001 ad00             BSR   LEDS_GetMsk
  0003 95               TSX   
  0004 f7               STA   ,X
  219:  
  220:    if (Mask) {                          /* Is bit mask correct? */
  0005 2705             BEQ   LC ;abs = 000c
  221:      PTB |= Mask;                       /* Set appropriate bit on port */
  0007 b600             LDA   _PTB
  0009 fa               ORA   ,X
  000a b700             STA   _PTB
  000c          LC:     
  222:    }
  223:  }
  000c 8a               PULH  
  000d 81               RTS   
  224:  
  225:  /*
  226:  ** ===================================================================
  227:  **     Method      :  LEDS_ClrBit (bean ByteIO)
  228:  **
  229:  **     Description :
  230:  **         This method clears (sets to zero) the specified bit
  231:  **         of the output value.
  232:  **         [ It is the same as "PutBit(Bit,FALSE);" ]
  233:  **     Parameters  :
  234:  **         NAME       - DESCRIPTION
  235:  **         BitNum     - Number of the bit to clear (0 to 7)
  236:  **     Returns     : Nothing
  237:  ** ===================================================================
  238:  */
  239:  void LEDS_ClrBit(byte BitNum)
  240:  {

Function: LEDS_ClrBit
Source  : Z:\vph1\2puertas\Casa\Code\LEDS.C
Options : -Cc -Env"GENPATH=Z:\vph1\2puertas\Casa;Z:\vph1\2puertas\Casa\bin;Z:\vph1\2puertas\Casa\cmd;*Z:\vph1\2puertas\Casa\Code;Z:\vph1\2puertas\Casa\prm;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\2puertas\Comun;*Z:\vph1\2puertas;Z:\vph1\2puertas\Casa\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\2puertas\Casa\bin -EnvTEXTPATH=Z:\vph1\2puertas\Casa\bin -Lasm=%n.lst -ObjN=Z:\vph1\2puertas\Casa\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\LEDS.C.o -Qvtpfar -WmsgSd1106

  0000 8b               PSHH  
  241:    byte Mask=LEDS_GetMsk(BitNum);       /* Temporary variable - bit mask */
  0001 ad00             BSR   LEDS_GetMsk
  0003 95               TSX   
  0004 f7               STA   ,X
  242:  
  243:    if (Mask) {                          /* Is bit mask correct? */
  0005 2705             BEQ   LC ;abs = 000c
  244:      PTB &= ~Mask;                      /* Clear appropriate bit on port */
  0007 43               COMA  
  0008 b400             AND   _PTB
  000a b700             STA   _PTB
  000c          LC:     
  245:    }
  246:  }
  000c 8a               PULH  
  000d 81               RTS   
  247:  
  248:  /*
  249:  ** ===================================================================
  250:  **     Method      :  LEDS_NegBit (bean ByteIO)
  251:  **
  252:  **     Description :
  253:  **         This method negates (invertes) the specified bit of the
  254:  **         output value.
  255:  **     Parameters  :
  256:  **         NAME       - DESCRIPTION
  257:  **         Bit        - Number of the bit to invert (0 to 7)
  258:  **     Returns     : Nothing
  259:  ** ===================================================================
  260:  */
  261:  void LEDS_NegBit(byte BitNum)
  262:  {

Function: LEDS_NegBit
Source  : Z:\vph1\2puertas\Casa\Code\LEDS.C
Options : -Cc -Env"GENPATH=Z:\vph1\2puertas\Casa;Z:\vph1\2puertas\Casa\bin;Z:\vph1\2puertas\Casa\cmd;*Z:\vph1\2puertas\Casa\Code;Z:\vph1\2puertas\Casa\prm;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\2puertas\Comun;*Z:\vph1\2puertas;Z:\vph1\2puertas\Casa\doc;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\hc08c\include;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\Bin\Plugins\support\ProcessorExpert\PESL\HC08;D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior CW08_V3.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\2puertas\Casa\bin -EnvTEXTPATH=Z:\vph1\2puertas\Casa\bin -Lasm=%n.lst -ObjN=Z:\vph1\2puertas\Casa\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\LEDS.C.o -Qvtpfar -WmsgSd1106

  0000 8b               PSHH  
  263:    byte Mask=LEDS_GetMsk(BitNum);       /* Temporary variable - bit mask */
  0001 ad00             BSR   LEDS_GetMsk
  0003 95               TSX   
  0004 f7               STA   ,X
  264:  
  265:    if (Mask) {                          /* Is bit mask correct? */
  0005 2705             BEQ   LC ;abs = 000c
  266:      PTB ^= Mask;                       /* Negate appropriate bit on port */
  0007 b600             LDA   _PTB
  0009 f8               EOR   ,X
  000a b700             STA   _PTB
  000c          LC:     
  267:    }
  268:  }
  000c 8a               PULH  
  000d 81               RTS   
  269:  
  270:  /*
  271:  ** ===================================================================
  272:  **     Method      :  LEDS_GetDir (bean ByteIO)
  273:  **
  274:  **     Description :
  275:  **         This method returns direction of the bean.
  276:  **     Parameters  : None
  277:  **     Returns     :
  278:  **         ---        - Direction of the bean (always TRUE, Output only)
  279:  **                      FALSE = Input, TRUE = Output
  280:  ** ===================================================================
  281:  */
  282:  /*
  283:  bool LEDS_GetDir(void)
  284:  
  285:  **  This method is implemented as a macro. See LEDS.h file.  **
  286:  */
  287:  
  288:  /*
  289:  ** ###################################################################
  290:  **
  291:  **     This file was created by UNIS Processor Expert 03.23 for 
  292:  **     the Motorola HC08 series of microcontrollers.
  293:  **
  294:  ** ###################################################################
  295:  */
  296:  
