/*
** ###################################################################
**
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**
**     Filename  : SPI1.H
**
**     Project   : vph1
** 
**     Processor : MC68HC908GP32CFB
**
**     Beantype  : SWSPI
**
**     Version   : Bean 01.002, Driver 01.01, CPU db: 2.87.041
**
**     Compiler  : Metrowerks HC08 C Compiler V-5.0.13
**
**     Date/Time : 4/28/lunes, 15:28
**
**     Abstract  :
**
**          This bean implements an external SPI communication interface specialy 
**          designed for SPI compatible beans. The interface uses three general-purpose 
**          I/O pins, first for the Input line, second for the Output line, third for 
**          the Serial Clock line. Is supported only Master mode with MSB first 
**          communication. 
**
**     Settings  :
**
**     Contents  :
**
**         RecvChar              - byte SPI1_RecvChar(byte *Chr);
**         SendChar              - byte SPI1_SendChar(byte Chr);
**         CharsInRxBuf          - byte SPI1_CharsInRxBuf(word *Chr);
**         CharsInTxBuf          - byte SPI1_CharsInTxBuf(word *Chr);
**         SetShiftClockPolarity - byte SPI1_SetShiftClockPolarity(byte Edge);
**
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2002
**
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
**
** ###################################################################
*/

#ifndef __SPI1
#define __SPI1

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Inhr4.h"
#include "Inhr5.h"
#include "Inhr6.h"

#include "Cpu.h"
/* MODULE SPI1. */

#ifndef __BWUserType_TPtrByte
#define __BWUserType_TPtrByte
  typedef byte* TPtrByte ; /* Pointer to byte */
#endif


byte SPI1_RecvChar(byte *Chr);
/*
** ===================================================================
**     Method      :  SPI1_RecvChar (bean SWSPI)
**
**     Description :
**         If any data received, this method returns one character,
**         otherwise it returns error code (it does not wait for
**         data).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to received character.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_RXEMPTY - No data in receiver
**                           ERR_OVERRUN - Overrun error is detected
** ===================================================================
*/

byte SPI1_SendChar(byte Chr);
/*
** ===================================================================
**     Method      :  SPI1_SendChar (bean SWSPI)
**
**     Description :
**         Send one character to the channel.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
** ===================================================================
*/

byte SPI1_CharsInRxBuf(word *Chr);
/*
** ===================================================================
**     Method      :  SPI1_CharsInRxBuf (bean SWSPI)
**
**     Description :
**         Return number of characters in the input buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to number of characters in the
**                           input buffer.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
** ===================================================================
*/

byte SPI1_CharsInTxBuf(word *Chr);
/*
** ===================================================================
**     Method      :  SPI1_CharsInTxBuf (bean SWSPI)
**
**     Description :
**         Return number of characters in the output buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - Pointer to number of characters in the
**                           output buffer.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
** ===================================================================
*/

byte SPI1_SetShiftClockPolarity(byte Edge);
/*
** ===================================================================
**     Method      :  SPI1_SetShiftClockPolarity (bean SWSPI)
**
**     Description :
**         Set the shift clock polarity in runtime. Output data will
**         be sampled on the selected edge polarity.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Edge            - Edge polarity, possible values:
**                           0-falling edge,
**                           1-rising edge.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
** ===================================================================
*/

void SPI1_Init(void);
/*
** ===================================================================
**     Method      :  SPI1_Init (bean SWSPI)
**
**     Description :
**         This method is internal. It is used by Processor Expert
**         only.
** ===================================================================
*/



/* END SPI1. */

#endif /* ifndef __SPI1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 02.89 for 
**     the Motorola HC08 series of microcontrollers.
**
** ###################################################################
*/
