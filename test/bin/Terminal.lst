ANSI-C/cC++ Compiler for HC08 V-5.0.15, Apr 11 2002

    1:  /*
    2:  ** ###################################################################
    3:  **
    4:  **     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
    5:  **
    6:  **     Filename  : Terminal.C
    7:  **
    8:  **     Project   : vph1
    9:  ** 
   10:  **     Processor : MC68HC908GP32CFB
   11:  **
   12:  **     Beantype  : AsynchroSerial
   13:  **
   14:  **     Version   : Bean 02.134, Driver 01.10, CPU db: 2.87.041
   15:  **
   16:  **     Compiler  : Metrowerks HC08 C Compiler V-5.0.13
   17:  **
   18:  **     Date/Time : 7/4/viernes, 14:31
   19:  **
   20:  **     Abstract  :
   21:  **
   22:  **         This bean "AsynchroSerial" implements an asynchronous serial
   23:  **         communication. The bean supports different settings of 
   24:  **         parity, word width, stop-bit and communication speed,
   25:  **         user can select interrupt or polling handler.
   26:  **         Communication speed can be changed also in runtime.
   27:  **         The bean requires one on-chip asynchronous serial channel.
   28:  **
   29:  **     Settings  :
   30:  **
   31:  **         Serial channel              : SCI
   32:  **
   33:  **         Protocol
   34:  **             Init baud rate          : 9600baud
   35:  **             Width                   : 8 bits
   36:  **             Stop bits               : 1
   37:  **             Parity                  : none
   38:  **             Breaks                  : Disabled
   39:  **
   40:  **         Registers
   41:  **             Input buffer            : SCDR      [24]
   42:  **             Output buffer           : SCDR      [24]
   43:  **             Control register        : SCC1      [19]
   44:  **             Mode register           : SCC2      [20]
   45:  **             Baud setting reg.       : SCBR      [25]
   46:  **             Special register        : SCS1      [22]
   47:  **
   48:  **
   49:  **
   50:  **         Used pins                   : 
   51:  **             ----------------------------------------------------
   52:  **               Function | On package |    Name
   53:  **             ----------------------------------------------------
   54:  **                Input   |     10     |  PTE1_RxD
   55:  **                Output  |     9      |  PTE0_TxD
   56:  **             ----------------------------------------------------
   57:  **
   58:  **
   59:  **
   60:  **     Contents  :
   61:  **
   62:  **         RecvChar        - byte Terminal_RecvChar(word *Chr);
   63:  **         SendChar        - byte Terminal_SendChar(word Chr);
   64:  **         GetCharsInRxBuf - word Terminal_GetCharsInRxBuf(void);
   65:  **         GetCharsInTxBuf - word Terminal_GetCharsInTxBuf(void);
   66:  **         GetError        - byte Terminal_GetError(byte *Err);
   67:  **
   68:  **
   69:  **     (c) Copyright UNIS, spol. s r.o. 1997-2002
   70:  **
   71:  **     UNIS, spol. s r.o.
   72:  **     Jundrovska 33
   73:  **     624 00 Brno
   74:  **     Czech Republic
   75:  **
   76:  **     http      : www.processorexpert.com
   77:  **     mail      : info@processorexpert.com
   78:  **
   79:  ** ###################################################################
   80:  */
   81:  
   82:  /* MODULE Terminal. */
   83:  #pragma MESSAGE DISABLE C4002 /* WARNING C4002: Result not used is ignored */
   84:  
   85:  #include "Terminal.h"
   86:  #include "IRQ.h"
   87:  #include "TIMER.h"
   88:  
   89:  
   90:  #define OVERRUN_ERR      1             /* Overrun error flag bit   */
   91:  #define FRAMING_ERR      2             /* Framing error flag bit   */
   92:  #define PARITY_ERR       4             /* Parity error flag bit    */
   93:  #define CHAR_IN_RX       8             /* Char is in RX buffer     */
   94:  #define FULL_TX          16            /* Full transmit buffer     */
   95:  #define RUNINT_FROM_TX   32            /* Interrupt is in progress */
   96:  #define FULL_RX          64            /* Full receive buffer      */
   97:  #define NOISE_ERR        128           /* Noise erorr flag bit     */
   98:  #define IDLE_ERR         256           /* Idle character flag bit  */
   99:  #define BREAK_ERR        512           /* Break detect             */
  100:  
  101:  static word SerFlag;                   /* Flags for serial communication */
  102:                                         /* Bits: 0 - OverRun error */
  103:                                         /*       1 - Framing error */
  104:                                         /*       2 - Parity error */
  105:                                         /*       3 - Char in RX buffer */
  106:                                         /*       4 - Full TX buffer */
  107:                                         /*       5 - Unused */
  108:                                         /*       6 - Full RX buffer */
  109:                                         /*       7 - Noise error */
  110:                                         /*       8 - Idle character  */
  111:                                         /*       9 - Break detected  */
  112:                                         /*      10 - Unused */
  113:  static word ErrFlag;                   /* Error flags mirror of SerFlag */
  114:  
  115:  
  116:  /*
  117:  ** ===================================================================
  118:  **     Method      :  Terminal_HWEnDi (bean AsynchroSerial)
  119:  **
  120:  **     Description :
  121:  **         This method is internal. It is used by Processor Expert
  122:  **         only.
  123:  ** ===================================================================
  124:  */
  125:  void Terminal_HWEnDi(void)
  126:  {

Function: Terminal_HWEnDi
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  127:      SCC1_ENSCI = 1;                    /* Enable device */
  0000 1c00             BSET  6,_SCC1
  128:      SCC2_TE = 1;                       /* Enable transmitter */
  0002 1600             BSET  3,_SCC2
  129:      SCC2_RE = 1;                       /* Enable receiver */
  0004 1400             BSET  2,_SCC2
  130:  }
  0006 81               RTS   
  131:  
  132:  
  133:  /*
  134:  ** ===================================================================
  135:  **     Method      :  Terminal_RecvChar (bean AsynchroSerial)
  136:  **
  137:  **     Description :
  138:  **         If any data received, this method returns one character,
  139:  **         otherwise it returns error code (it does not wait for
  140:  **         data). This method is enabled only if the receiver
  141:  **         property is enabled.
  142:  **     Parameters  :
  143:  **         NAME            - DESCRIPTION
  144:  **       * Chr             - Pointer to received character
  145:  **     Returns     :
  146:  **         ---             - Error code, possible codes:
  147:  **                           ERR_OK - OK
  148:  **                           ERR_SPEED - This device does not work in
  149:  **                           the active speed mode
  150:  **                           ERR_RXEMPTY - No data in receiver
  151:  **                           ERR_OVERRUN - Overrun error is detected
  152:  **                           ERR_FRAMING - Framing error is detected
  153:  **                           ERR_PARITY - Parity error is detected
  154:  ** ===================================================================
  155:  */
  156:  #ifdef __cplusplus
  157:  	extern "C"
  158:  #endif
  159:  byte Terminal_RecvChar(byte *Chr)
  160:  {

Function: Terminal_RecvChar
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  0000 87               PSHA  
  0001 89               PSHX  
  0002 8b               PSHH  
  161:    byte Result = ERR_OK;                /* Return error code */
  0003 95               TSX   
  0004 7f               CLR   ,X
  162:  
  163:    if (!(SCS1_SCRF) && !(SCS1 & 15))    /* Is the reciver empty and no error is set? */
  0005 0a000b           BRSET 5,_SCS1,L13 ;abs = 0013
  0008 b600             LDA   _SCS1
  000a a50f             BIT   #15
  000c 2605             BNE   L13 ;abs = 0013
  164:      return ERR_RXEMPTY;                /* If yes then error */
  000e a60a             LDA   #10
  0010 cc00a8           JMP   LA8 ;abs = 00a8
  0013          L13:    
  165:    if (SCS1_IDLE)
  0013 090008           BRCLR 4,_SCS1,L1E ;abs = 001e
  166:      SerFlag |= IDLE_ERR;               /* Idle character flag */
  0016 c60000           LDA   SerFlag
  0019 aa01             ORA   #1
  001b c70000           STA   SerFlag
  001e          L1E:    
  167:    if (SCS1_PE)
  001e 010008           BRCLR 0,_SCS1,L29 ;abs = 0029
  168:      SerFlag |= PARITY_ERR;             /* Parity error flag */
  0021 c60001           LDA   SerFlag:1
  0024 aa04             ORA   #4
  0026 c70001           STA   SerFlag:1
  0029          L29:    
  169:    if (SCS1_NF)
  0029 050008           BRCLR 2,_SCS1,L34 ;abs = 0034
  170:      SerFlag |= NOISE_ERR;              /* Noise error flag */
  002c c60001           LDA   SerFlag:1
  002f aa80             ORA   #-128
  0031 c70001           STA   SerFlag:1
  0034          L34:    
  171:    if (SCS1_OR)
  0034 070008           BRCLR 3,_SCS1,L3F ;abs = 003f
  172:      SerFlag |= OVERRUN_ERR;            /* Overrun error flag */
  0037 c60001           LDA   SerFlag:1
  003a aa01             ORA   #1
  003c c70001           STA   SerFlag:1
  003f          L3F:    
  173:    if (SCS2_BKF)
  003f 030008           BRCLR 1,_SCS2,L4A ;abs = 004a
  174:      SerFlag |= BREAK_ERR;              /* Break flag */
  0042 c60000           LDA   SerFlag
  0045 aa02             ORA   #2
  0047 c70000           STA   SerFlag
  004a          L4A:    
  175:    if (SCS1_FE)
  004a 030008           BRCLR 1,_SCS1,L55 ;abs = 0055
  176:      SerFlag |= FRAMING_ERR;            /* Framming error flag */
  004d c60001           LDA   SerFlag:1
  0050 aa02             ORA   #2
  0052 c70001           STA   SerFlag:1
  0055          L55:    
  177:    *Chr = SCDR;                         /* Read data from the receiver */
  0055 ee02             LDX   2,X
  0057 9ee602           LDA   2,SP
  005a 87               PSHA  
  005b 8a               PULH  
  005c 5e00             MOV   _SCDR,X+
  178:    ErrFlag = SerFlag;                   /* Copy SerFlag status to ErrorFlag status variable */
  005e c60001           LDA   SerFlag:1
  0061 450000           LDHX  @ErrFlag
  0064 e701             STA   1,X
  0066 c60000           LDA   SerFlag
  0069 f7               STA   ,X
  179:    if((SerFlag & OVERRUN_ERR) != 0)     /* Is the overrun error detected? */
  006a e601             LDA   1,X
  006c a501             BIT   #1
  006e 2704             BEQ   L74 ;abs = 0074
  180:      Result = ERR_OVERRUN;              /* If yes then set the overrun error flag */
  0070 a60d             LDA   #13
  0072 2023             BRA   L97 ;abs = 0097
  0074          L74:    
  181:    else if((SerFlag & BREAK_ERR) != 0)  /* Is the break error detected? */
  0074 c60000           LDA   ErrFlag
  0077 a502             BIT   #2
  0079 2704             BEQ   L7F ;abs = 007f
  182:      Result = ERR_BREAK;                /* If yes then set the break error flag */
  007b a613             LDA   #19
  007d 2018             BRA   L97 ;abs = 0097
  007f          L7F:    
  183:    else if((SerFlag & PARITY_ERR) != 0) /* Is the parity error detected? */
  007f c60001           LDA   ErrFlag:1
  0082 a504             BIT   #4
  0084 2704             BEQ   L8A ;abs = 008a
  184:      Result = ERR_PARITY;               /* If yes then set the parity error flag */
  0086 a60f             LDA   #15
  0088 200d             BRA   L97 ;abs = 0097
  008a          L8A:    
  185:    else if((SerFlag & FRAMING_ERR) != 0) /* Is the framing error detected? */
  008a a502             BIT   #2
  008c 2704             BEQ   L92 ;abs = 0092
  186:      Result = ERR_FRAMING;              /* If yes then set the framing error flag */
  008e a60e             LDA   #14
  0090 2005             BRA   L97 ;abs = 0097
  0092          L92:    
  187:    else if((SerFlag & NOISE_ERR) != 0)  /* Is the noise error detected? */
  0092 4d               TSTA  
  0093 2a04             BPL   L99 ;abs = 0099
  188:      Result = ERR_NOISE;                /* If yes then set the noise error flag */
  0095 a610             LDA   #16
  0097          L97:    
  0097 95               TSX   
  0098 f7               STA   ,X
  0099          L99:    
  189:    SerFlag &= ~(OVERRUN_ERR|FRAMING_ERR|PARITY_ERR|NOISE_ERR|BREAK_ERR); /* Clear all errors in the status variable */
  0099 450000           LDHX  @SerFlag
  009c e601             LDA   1,X
  009e a478             AND   #120
  00a0 e701             STA   1,X
  00a2 f6               LDA   ,X
  00a3 a4fd             AND   #-3
  00a5 f7               STA   ,X
  190:    return Result;                       /* Return error code */
  00a6 95               TSX   
  00a7 f6               LDA   ,X
  00a8          LA8:    
  191:  }
  00a8 a703             AIS   #3
  00aa 81               RTS   
  192:  
  193:  /*
  194:  ** ===================================================================
  195:  **     Method      :  Terminal_SendChar (bean AsynchroSerial)
  196:  **
  197:  **     Description :
  198:  **         Send one character to the channel. This method is
  199:  **         available only if the transmitter property is enabled.
  200:  **     Parameters  :
  201:  **         NAME            - DESCRIPTION
  202:  **         Chr             - Character to send
  203:  **     Returns     :
  204:  **         ---             - Error code, possible codes:
  205:  **                           ERR_OK - OK
  206:  **                           ERR_SPEED - This device does not work in
  207:  **                           the active speed mode
  208:  **                           ERR_TXFULL - Transmitter is full
  209:  ** ===================================================================
  210:  */
  211:  #ifdef __cplusplus
  212:  	extern "C"
  213:  #endif
  214:  byte Terminal_SendChar(byte Chr)
  215:  {

Function: Terminal_SendChar
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  216:    if(!SCS1_SCTE)                       /* Is the transmitter empty? */
  0000 0e0003           BRSET 7,_SCS1,L6 ;abs = 0006
  217:      return ERR_TXFULL;                 /* If no then error */
  0003 a60b             LDA   #11
  0005 81               RTS   
  0006          L6:     
  218:    SCDR = (byte)Chr;
  0006 b700             STA   _SCDR
  219:    return ERR_OK;                       /* OK */
  0008 4f               CLRA  
  220:  }
  0009 81               RTS   
  221:  
  222:  /*
  223:  ** ===================================================================
  224:  **     Method      :  Terminal_GetCharsInRxBuf (bean AsynchroSerial)
  225:  **
  226:  **     Description :
  227:  **         Return number of characters in the input buffer. This
  228:  **         method is available only if the receiver property is
  229:  **         enabled.
  230:  **     Parameters  : None
  231:  **     Returns     :
  232:  **         ---             - Number of characters in the input
  233:  **                           buffer.
  234:  ** ===================================================================
  235:  */
  236:  word Terminal_GetCharsInRxBuf(void)
  237:  {

Function: Terminal_GetCharsInRxBuf
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  238:    return SCS1_SCRF;                    /* Return number of chars in receive buffer */
  0000 0a0003           BRSET 5,_SCS1,L6 ;abs = 0006
  0003 4f               CLRA  
  0004 5f               CLRX  
  0005 81               RTS   
  0006          L6:     
  0006 a601             LDA   #1
  0008 5f               CLRX  
  239:  }
  0009 81               RTS   
  240:  
  241:  /*
  242:  ** ===================================================================
  243:  **     Method      :  Terminal_GetCharsInTxBuf (bean AsynchroSerial)
  244:  **
  245:  **     Description :
  246:  **         Return number of characters in the output buffer. This
  247:  **         method is available only if the transmitter property is
  248:  **         enabled.
  249:  **     Parameters  : None
  250:  **     Returns     :
  251:  **         ---             - Number of characters in the output
  252:  **                           buffer.
  253:  ** ===================================================================
  254:  */
  255:  #ifdef __cplusplus
  256:  	extern "C"
  257:  #endif
  258:  word Terminal_GetCharsInTxBuf(void)
  259:  {

Function: Terminal_GetCharsInTxBuf
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  260:    return (!SCS1_SCTE);                 /* Return number of chars in the transmitter buffer */
  0000 0f0003           BRCLR 7,_SCS1,L6 ;abs = 0006
  0003 5f               CLRX  
  0004 4f               CLRA  
  0005 81               RTS   
  0006          L6:     
  0006 a601             LDA   #1
  0008 5f               CLRX  
  261:  }
  0009 81               RTS   
  262:  
  263:  /*
  264:  ** ===================================================================
  265:  **     Method      :  Terminal_GetError (bean AsynchroSerial)
  266:  **
  267:  **     Description :
  268:  **         Return a set of errors on the channel (errors that cannot
  269:  **         be returned in given methods). The errors accumulate in a
  270:  **         set; after calling GetError this set is returned and
  271:  **         cleared.
  272:  **     Parameters  :
  273:  **         NAME            - DESCRIPTION
  274:  **       * Err             - Pointer to returned set of errors
  275:  **     Returns     :
  276:  **         ---             - Error code (if GetError did not succeed),
  277:  **                           possible codes:
  278:  **                           ERR_OK - OK
  279:  **                           ERR_SPEED - This device does not work in
  280:  **                           the active speed mode
  281:  ** ===================================================================
  282:  */
  283:  byte Terminal_GetError(Terminal_TError *Err)
  284:  {

Function: Terminal_GetError
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  0000 87               PSHA  
  0001 89               PSHX  
  285:    Err->err = 0;
  0002 89               PSHX  
  0003 8a               PULH  
  0004 97               TAX   
  0005 7f               CLR   ,X
  286:    Err->errName.OverRun = ((ErrFlag & OVERRUN_ERR) != 0); /* Overrun error */
  0006 c60001           LDA   ErrFlag:1
  0009 a501             BIT   #1
  000b 2605             BNE   L12 ;abs = 0012
  000d f6               LDA   ,X
  000e a4fe             AND   #-2
  0010 2003             BRA   L15 ;abs = 0015
  0012          L12:    
  0012 f6               LDA   ,X
  0013 aa01             ORA   #1
  0015          L15:    
  0015 f7               STA   ,X
  287:    Err->errName.Framing = ((ErrFlag & FRAMING_ERR ) != 0); /* Framing error */
  0016 c60001           LDA   ErrFlag:1
  0019 a502             BIT   #2
  001b 2607             BNE   L24 ;abs = 0024
  001d ad5d             BSR   L7C ;abs = 007c
  001f f6               LDA   ,X
  0020 a4fd             AND   #-3
  0022 2005             BRA   L29 ;abs = 0029
  0024          L24:    
  0024 ad56             BSR   L7C ;abs = 007c
  0026 f6               LDA   ,X
  0027 aa02             ORA   #2
  0029          L29:    
  0029 f7               STA   ,X
  288:    Err->errName.Parity = ((ErrFlag & PARITY_ERR) != 0); /* Parity error */
  002a c60001           LDA   ErrFlag:1
  002d a504             BIT   #4
  002f 2607             BNE   L38 ;abs = 0038
  0031 ad49             BSR   L7C ;abs = 007c
  0033 f6               LDA   ,X
  0034 a4fb             AND   #-5
  0036 2005             BRA   L3D ;abs = 003d
  0038          L38:    
  0038 ad42             BSR   L7C ;abs = 007c
  003a f6               LDA   ,X
  003b aa04             ORA   #4
  003d          L3D:    
  003d f7               STA   ,X
  289:    Err->errName.Noise = ((ErrFlag & NOISE_ERR) != 0); /* Noise error */
  003e c60001           LDA   ErrFlag:1
  0041 2b07             BMI   L4A ;abs = 004a
  0043 ad37             BSR   L7C ;abs = 007c
  0045 f6               LDA   ,X
  0046 a4ef             AND   #-17
  0048 2005             BRA   L4F ;abs = 004f
  004a          L4A:    
  004a ad30             BSR   L7C ;abs = 007c
  004c f6               LDA   ,X
  004d aa10             ORA   #16
  004f          L4F:    
  004f f7               STA   ,X
  290:    Err->errName.Break = ((ErrFlag & BREAK_ERR) != 0); /* Break error */
  0050 c60000           LDA   ErrFlag
  0053 a502             BIT   #2
  0055 2607             BNE   L5E ;abs = 005e
  0057 ad23             BSR   L7C ;abs = 007c
  0059 f6               LDA   ,X
  005a a4df             AND   #-33
  005c 2005             BRA   L63 ;abs = 0063
  005e          L5E:    
  005e ad1c             BSR   L7C ;abs = 007c
  0060 f6               LDA   ,X
  0061 aa20             ORA   #32
  0063          L63:    
  0063 f7               STA   ,X
  291:    Err->errName.Idle = ((ErrFlag & IDLE_ERR) != 0); /* Idle character */
  0064 c60000           LDA   ErrFlag
  0067 a501             BIT   #1
  0069 2607             BNE   L72 ;abs = 0072
  006b ad0f             BSR   L7C ;abs = 007c
  006d f6               LDA   ,X
  006e a4bf             AND   #-65
  0070 2005             BRA   L77 ;abs = 0077
  0072          L72:    
  0072 ad08             BSR   L7C ;abs = 007c
  0074 f6               LDA   ,X
  0075 aa40             ORA   #64
  0077          L77:    
  0077 f7               STA   ,X
  292:    return ERR_OK;                       /* OK */
  0078 4f               CLRA  
  293:  }
  0079 a702             AIS   #2
  007b 81               RTS   
  007c          L7C:    
  007c 95               TSX   
  007d e602             LDA   2,X
  007f 87               PSHA  
  0080 ee03             LDX   3,X
  0082 8a               PULH  
  0083 81               RTS   
  294:  
  295:  /*
  296:  ** ===================================================================
  297:  **     Method      :  Terminal_Init (bean AsynchroSerial)
  298:  **
  299:  **     Description :
  300:  **         This method is internal. It is used by Processor Expert
  301:  **         only.
  302:  ** ===================================================================
  303:  */
  304:  void Terminal_Init(void)
  305:  {

Function: Terminal_Init
Source  : Z:\vph1\test\Code\Terminal.C
Options : -Cc -Env"GENPATH=Z:\vph1\test;Z:\vph1\test\bin;Z:\vph1\test\cmd;*Z:\vph1\test\Code;Z:\vph1\test\prm;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\LIB;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\src;*D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\Bin\Plugins\support\ProcessorExpert;*Z:\vph1\Comun;D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -Env"LIBPATH=D:\Archivos de programa\Metrowerks\CodeWarrior HC08_V2.0\lib\HC08c\INCLUDE" -EnvOBJPATH=Z:\vph1\test\bin -EnvTEXTPATH=Z:\vph1\test\bin -Lasm=%n.lst -ObjN=Z:\vph1\test\vph1_Data\P&E_PEDebug_FCS-ICS-ICD\ObjectCode\Terminal.C.o -WmsgSd1106 -WmsgSd4002

  306:    SerFlag = 0;                         /* Reset flags */
  0000 4f               CLRA  
  0001 c70001           STA   SerFlag:1
  0004 c70000           STA   SerFlag
  307:    SCC1 = 0;
  0007 3f00             CLR   _SCC1
  308:    SCC3 = 0;                            /* Disable error interrupts */
  0009 3f00             CLR   _SCC3
  309:    SCBR_SCP = 0;                        /* Set prescaler bits */
  000b b600             LDA   _SCBR
  000d a4cf             AND   #-49
  000f b700             STA   _SCBR
  310:    SCBR_SCR = 3;                        /* Set divisor bits */
  0011 b600             LDA   _SCBR
  0013 a4f8             AND   #-8
  0015 aa03             ORA   #3
  0017 b700             STA   _SCBR
  311:    Terminal_HWEnDi();                   /* Enable/disable device according to status flags */
  0019 cc0000           JMP   Terminal_HWEnDi
  312:  }
  313:  
  314:  
  315:  /* END Terminal. */
  316:  
  317:  
  318:  /*
  319:  ** ###################################################################
  320:  **
  321:  **     This file was created by UNIS Processor Expert 02.89 for 
  322:  **     the Motorola HC08 series of microcontrollers.
  323:  **
  324:  ** ###################################################################
  325:  */
  326:  
